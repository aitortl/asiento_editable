/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package asientos_grada.gui;

import asientos_grada.logica.Logica;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import asiento.Asiento;

/**
 *
 * @author Aitor Trabanco LLano
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private VentanaOcupacionGrada ventanaOcupacionGrada;
    private VentanaReservar ventanaReservar;
    private VentanaListaReservas ventanaListaReservas;
    private HashMap<String, Asiento> todosBotones = new HashMap<>();
    private HashMap<String, Asiento> botonesSeleccionados = new HashMap<>();
    private Logica logica = new Logica();

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        CrearGrada();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPPabellon = new javax.swing.JPanel();
        jMBVentanaPrincipal = new javax.swing.JMenuBar();
        jMReservar = new javax.swing.JMenu();
        jMListaReservas = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grada");
        setMinimumSize(new java.awt.Dimension(1400, 1000));
        setPreferredSize(new java.awt.Dimension(1400, 1000));

        jPPabellon.setName(""); // NOI18N

        javax.swing.GroupLayout jPPabellonLayout = new javax.swing.GroupLayout(jPPabellon);
        jPPabellon.setLayout(jPPabellonLayout);
        jPPabellonLayout.setHorizontalGroup(
            jPPabellonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1400, Short.MAX_VALUE)
        );
        jPPabellonLayout.setVerticalGroup(
            jPPabellonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );

        jMReservar.setText("Reserva");
        jMReservar.setActionCommand("Reservar");
        jMReservar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMReservarMouseClicked(evt);
            }
        });
        jMBVentanaPrincipal.add(jMReservar);

        jMListaReservas.setText("Lista Reservas");
        jMListaReservas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMListaReservasMouseClicked(evt);
            }
        });
        jMBVentanaPrincipal.add(jMListaReservas);

        setJMenuBar(jMBVentanaPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPPabellon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPPabellon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMReservarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMReservarMouseClicked
        String asientosReservados = "";
        for (Map.Entry<String, Asiento> entry : todosBotones.entrySet()) {
            if (entry.getValue().getBackground()==entry.getValue().getColorSeleccionado()){
                asientosReservados += entry.getKey() + "\n";
            }
        }
        if (asientosReservados.isBlank()) {
            mostrarMensajeAdvertencia("Debes seleccionar los asientos.", "Selección Asientos");
        }else {
            ventanaReservar = new VentanaReservar(this, true, asientosReservados, this);
            ventanaReservar.setVisible(true);  
        }
        for (Map.Entry<String, Asiento> entry : todosBotones.entrySet()) {
            if (entry.getValue().getBackground()==entry.getValue().getColorSeleccionado()){
                entry.getValue().setEstado(3);
                entry.getValue().setBackground(entry.getValue().getColorOcupado());
            }
            
        }
    }//GEN-LAST:event_jMReservarMouseClicked

    private void jMListaReservasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMListaReservasMouseClicked
        ventanaListaReservas = new VentanaListaReservas(this, true, logica.getReservas(), this);
        ventanaListaReservas.setVisible(true);
    }//GEN-LAST:event_jMListaReservasMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMBVentanaPrincipal;
    private javax.swing.JMenu jMListaReservas;
    private javax.swing.JMenu jMReservar;
    private javax.swing.JPanel jPPabellon;
    // End of variables declaration//GEN-END:variables

    //MÉTODOS PARA CREAR LAS GRADAS Y BOTONOES
    private void CrearGrada() {
        //El jPPabellon lo introducí desde diseño. El BorderLayout permite dividirlo en 5 zonas, una central y los puntos cardinales
        jPPabellon.setLayout(new BorderLayout());
        //Inicio los paneles de las gradas
        JPanel JPNorte;
        JPanel JPSur;
        JPanel JPIzq;
        JPanel JPDrch;
        JPanel JPCampo = new JPanel(); //este lo inicio ya porque no voy a usar métodos para su creación

        //Inicio las gradas y creo las secciones y lo botones
        JPNorte = crearPanelBotonesGrada("GN", 1, 3, 5, 5);
        JPSur = crearPanelBotonesGrada("GS", 1, 3, 5, 5);
        JPIzq = crearPanelBotonesGrada("GI", 2, 1, 10, 3);
        JPDrch = crearPanelBotonesGrada("GD", 2, 1, 10, 3);
        JPCampo.setLayout(new GridLayout(1, 1, 0, 0));

        //Doy nombre a todas los paneles
        JPNorte.setName("JPGradaNorte");
        JPSur.setName("JPGradaSur");
        JPIzq.setName("JPGradaIzquierda");
        JPDrch.setName("JPGradaDerecha");
        JPCampo.setName("JPCampo");

        //El campo va a llevar una imagen dentro de un botón
        JButton bCampo = new JButton();
        //Ruta de la imagen
        ImageIcon icono = new ImageIcon("src/asientos_grada/img/campo.png");
        bCampo.setName("JBCampo");
        bCampo.setIcon(icono); //Le pongo la imagen del campo al botón
        //Listener para darle función al botón del campo
        bCampo.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                abrirVentanaLibreOcupado(e);
            }

        });

        //Ubico las gradas (los panel inicializados) y el campo (el botón con imagen) en el panel principal
        jPPabellon.add(JPNorte, BorderLayout.NORTH);
        jPPabellon.add(JPSur, BorderLayout.SOUTH);
        jPPabellon.add(JPIzq, BorderLayout.WEST);
        jPPabellon.add(JPDrch, BorderLayout.EAST);
        jPPabellon.add(bCampo, BorderLayout.CENTER);
    }

    private JPanel crearPanelBotonesGrada(String nombre, int filas, int columnas, int subFilas, int subColumnas) {
        String nombreAsiento = nombre;
        int contadorFila = 1;
        int contadorColumna = 1;

        //Inicio un panel grada con un gridlayout de las dimensiones que se le pasa al método
        JPanel panelGrada = new JPanel(new GridLayout(filas, columnas, 3, 3));
        //Compruebo en qué grada introduzco los botones de asientos para que el nombre sea adecuado
        //gradas superiores e inferiores
        if (nombreAsiento.equals("GN") || nombreAsiento.equalsIgnoreCase("GS")) {
            for (int i = 0; i < filas * columnas; i++) {
                JPanel panelAsientos = new JPanel(new GridLayout(subFilas, subColumnas));
                for (int j = 0; j < subFilas * subColumnas; j++) {
                    if ((j == 5) || (j == 10) || (j == 15) || (j == 20)) {
                        contadorFila++;
                        contadorColumna = 1;
                    }
                    Asiento botonAsiento = new Asiento();
                    botonAsiento.setText(nombreAsiento + (i + 1) + "-0" + contadorFila + "-0" + contadorColumna);
                    panelAsientos.add(botonAsiento);
                    todosBotones.put(botonAsiento.getText(), botonAsiento);
                    contadorColumna++;
                }
                contadorFila = 1;
                contadorColumna = 1;
                panelGrada.add(panelAsientos);
            }
            //gradas laterales
        } else {
            for (int i = 0; i < filas; i++) {
                JPanel panelAsientos = new JPanel(new GridLayout(subFilas, subColumnas));
                for (int j = 0; j < subFilas * subColumnas; j++) {
                    if ((j == 3) || (j == 6) || (j == 9) || (j == 12) || (j == 15) || (j == 18) || (j == 21) || (j == 24) || (j == 27)) {
                        contadorFila++;
                        contadorColumna = 1;
                    }
                    String nombreAsientoCompleto;
                    if (contadorFila >= 10) {
                        nombreAsientoCompleto = nombreAsiento + (i + 1) + "-" + contadorFila + "-0" + contadorColumna;
                    } else {
                        nombreAsientoCompleto = nombreAsiento + (i + 1) + "-0" + contadorFila + "-0" + contadorColumna;
                    }
                    Asiento botonAsiento = new Asiento();
                    botonAsiento.setText(nombreAsientoCompleto);
                    panelAsientos.add(botonAsiento);
                    todosBotones.put(botonAsiento.getText(), botonAsiento);
                    contadorColumna++;
                }
                contadorFila = 1;
                contadorColumna = 1;
                panelGrada.add(panelAsientos);
            }
        }
        return panelGrada;
    }

    //MÉTODOS PARA ABRIR LAS VENTANAS SECUNDARIAS
    private void abrirVentanaLibreOcupado(MouseEvent e) {
        int ocupados = 0;
        int libres = todosBotones.size();
        for (Map.Entry<String, Asiento> entry : todosBotones.entrySet()) {
            if (entry.getValue().getBackground() == entry.getValue().getColorOcupado()) {
                ocupados++;
                libres--;
            }
        }
        ventanaOcupacionGrada = new VentanaOcupacionGrada(this, false, ocupados, libres);
        ventanaOcupacionGrada.setVisible(true);

    }

    public void reservarAsientos(String nombre, String apellidos, Date date) {
        for (Map.Entry<String, Asiento> entry : todosBotones.entrySet()) {
            if(entry.getValue().getBackground()==entry.getValue().getColorSeleccionado()){
                botonesSeleccionados.put(entry.getKey(), entry.getValue());
            }
        }
        logica.listadoReservas(nombre, apellidos, date, botonesSeleccionados);
        botonesSeleccionados.clear();
    }

    private void mostrarMensajeAdvertencia(String mensaje, String titulo) throws HeadlessException {
        JOptionPane.showMessageDialog(null, mensaje, titulo, JOptionPane.WARNING_MESSAGE);
    }

    void borrarReserva(String grada, String asiento) {
        String nombreAsientoCompleto = grada + "-" + asiento;
        logica.borrarReserva(grada, asiento);
        for (Map.Entry<String, Asiento> entry : todosBotones.entrySet()) {
            if (entry.getKey().equals(nombreAsientoCompleto)) {
                entry.getValue().setBackground(entry.getValue().getColorLibre());
                entry.getValue().setEstado(1);
                entry.getValue().setForeground(Color.BLACK);
            }
        }
    }

    void desmarcarBotonesSeleccionados() {
        for (Map.Entry<String, Asiento> entry : todosBotones.entrySet()) {
            if(entry.getValue().getBackground()==entry.getValue().getColorSeleccionado()){
                entry.getValue().setEstado(1);
                entry.getValue().setBackground(entry.getValue().getColorLibre());
            }
        }
    }

}
